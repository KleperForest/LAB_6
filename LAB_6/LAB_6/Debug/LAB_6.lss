
LAB_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000178  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d2  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  0000115b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c1  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000088  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9e:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
    }
}

void initUART9600(){
	//Paso 1:  RX como entrada y TX como saldia
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |=(1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2: Configurar UCSR0A
	//Registro A
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: Configurar UCSR0B
	UCSR0B = 0;
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	//Habilitar recepcion y transmision
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C> ASYNCRONO, PARIDAD NO. bit de stop. 8 caracteres.
	UCSR0C = 0;
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
	
	//Paso 5: Configurar Velocidad de Boudare: 9600
	UBRR0 = 103;
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  da:	08 95       	ret

000000dc <writeUART>:
	
}

//Interrupcion
void writeUART(char Caracter){
	while(!(UCSR0A &(1<<UDRE0)));// Enviar a compu
  dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e0:	95 ff       	sbrs	r25, 5
  e2:	fc cf       	rjmp	.-8      	; 0xdc <writeUART>
	UDR0 = Caracter;
  e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e8:	08 95       	ret

000000ea <writeTextUART>:
}
void writeTextUART(char* Texto){
  ea:	bc 01       	movw	r22, r24
	int i;
	for(i=0; Texto[i]!='\0'; i++){
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	08 c0       	rjmp	.+16     	; 0x102 <writeTextUART+0x18>
		while (!(UCSR0A &(1<<UDRE0)));
  f2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f6:	95 ff       	sbrs	r25, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <writeTextUART+0x8>
		UDR0 = Texto[i];
  fa:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while(!(UCSR0A &(1<<UDRE0)));// Enviar a compu
	UDR0 = Caracter;
}
void writeTextUART(char* Texto){
	int i;
	for(i=0; Texto[i]!='\0'; i++){
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	fb 01       	movw	r30, r22
 104:	e2 0f       	add	r30, r18
 106:	f3 1f       	adc	r31, r19
 108:	40 81       	ld	r20, Z
 10a:	41 11       	cpse	r20, r1
 10c:	f2 cf       	rjmp	.-28     	; 0xf2 <writeTextUART+0x8>
		while (!(UCSR0A &(1<<UDRE0)));
		UDR0 = Texto[i];
	}
}
 10e:	08 95       	ret

00000110 <main>:

volatile uint8_t bufferTX;

int main(void)
{
    initUART9600();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei();
 114:	78 94       	sei
	writeUART('H');
 116:	88 e4       	ldi	r24, 0x48	; 72
 118:	0e 94 6e 00 	call	0xdc	; 0xdc <writeUART>
	writeUART('o');
 11c:	8f e6       	ldi	r24, 0x6F	; 111
 11e:	0e 94 6e 00 	call	0xdc	; 0xdc <writeUART>
	writeUART('l');
 122:	8c e6       	ldi	r24, 0x6C	; 108
 124:	0e 94 6e 00 	call	0xdc	; 0xdc <writeUART>
	writeUART('a');
 128:	81 e6       	ldi	r24, 0x61	; 97
 12a:	0e 94 6e 00 	call	0xdc	; 0xdc <writeUART>
	writeUART(10);
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	0e 94 6e 00 	call	0xdc	; 0xdc <writeUART>
	writeUART(13);
 134:	8d e0       	ldi	r24, 0x0D	; 13
 136:	0e 94 6e 00 	call	0xdc	; 0xdc <writeUART>
	
	writeTextUART("Hola Mundo");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 75 00 	call	0xea	; 0xea <writeTextUART>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x32>

00000144 <__vector_18>:
		while (!(UCSR0A &(1<<UDRE0)));
		UDR0 = Texto[i];
	}
}

ISR(USART_RX_vect){ // Resepcion.
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
	
	bufferTX = UDR0;
 150:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 154:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
	while(!(UCSR0A &(1<<UDRE0)));//Enviar de regreso
 158:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15c:	85 ff       	sbrs	r24, 5
 15e:	fc cf       	rjmp	.-8      	; 0x158 <__vector_18+0x14>
	UDR0 = bufferTX;
 160:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 164:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
