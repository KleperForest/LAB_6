
LAB_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000796  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b5  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a7  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 00 	call	0x120	; 0x120 <main>
  88:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
}

void setup(void)
{
	// Configurar pines PB0 a PB3 como salidas para LEDs.
	DDRB |= 0b00001111;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f 60       	ori	r24, 0x0F	; 15
  94:	84 b9       	out	0x04, r24	; 4
	// Configurar pines PD4 a PD7 como salidas para LEDs.
	DDRD |= 0b11110000;
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	80 6f       	ori	r24, 0xF0	; 240
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	08 95       	ret

0000009e <initUART9600>:
}

void initUART9600()
{
	// Paso 1: RX como entrada y TX como salida
	DDRD &= ~(1 << DDD0);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1);
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8a b9       	out	0x0a, r24	; 10

	// Paso 2: Configurar UCSR0A
	// Registro A
	UCSR0A = 0;
  aa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	// Paso 3: Configurar UCSR0B
	UCSR0B = 0;
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
	// Habilitar recepción y transmisión
	UCSR0B |= (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
  b4:	80 81       	ld	r24, Z
  b6:	88 69       	ori	r24, 0x98	; 152
  b8:	80 83       	st	Z, r24

	// Paso 4: Configurar UCSR0C> ASINCRONO, PARIDAD NO. Bit de stop. 8 caracteres.
	UCSR0C = 0;
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1

	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
  c0:	80 81       	ld	r24, Z
  c2:	86 60       	ori	r24, 0x06	; 6
  c4:	80 83       	st	Z, r24

	// Paso 5: Configurar Velocidad de Baudrate: 9600
	UBRR0 = 103;
  c6:	87 e6       	ldi	r24, 0x67	; 103
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d2:	08 95       	ret

000000d4 <__vector_18>:
}

ISR(USART_RX_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
	bufferRX = UDR0;
  e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <decimalToBinary>:

void decimalToBinary(uint8_t decimal, uint8_t binary[])
{
	for (int i = 0; i < 8; i++)
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	0f c0       	rjmp	.+30     	; 0x118 <decimalToBinary+0x24>
	{
		binary[i] = (decimal >> i) & 0x01;
  fa:	fb 01       	movw	r30, r22
  fc:	e4 0f       	add	r30, r20
  fe:	f5 1f       	adc	r31, r21
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	04 2e       	mov	r0, r20
 106:	02 c0       	rjmp	.+4      	; 0x10c <decimalToBinary+0x18>
 108:	35 95       	asr	r19
 10a:	27 95       	ror	r18
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <decimalToBinary+0x14>
 110:	21 70       	andi	r18, 0x01	; 1
 112:	20 83       	st	Z, r18
	bufferRX = UDR0;
}

void decimalToBinary(uint8_t decimal, uint8_t binary[])
{
	for (int i = 0; i < 8; i++)
 114:	4f 5f       	subi	r20, 0xFF	; 255
 116:	5f 4f       	sbci	r21, 0xFF	; 255
 118:	48 30       	cpi	r20, 0x08	; 8
 11a:	51 05       	cpc	r21, r1
 11c:	74 f3       	brlt	.-36     	; 0xfa <decimalToBinary+0x6>
	{
		binary[i] = (decimal >> i) & 0x01;
	}
}
 11e:	08 95       	ret

00000120 <main>:
void setup(void);
void decimalToBinary(uint8_t decimal, uint8_t binary[]);
void sendByteUSART(uint8_t data);

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	28 97       	sbiw	r28, 0x08	; 8
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
	initUART9600();
 134:	0e 94 4f 00 	call	0x9e	; 0x9e <initUART9600>
	sei();
 138:	78 94       	sei
	setup();
 13a:	0e 94 48 00 	call	0x90	; 0x90 <setup>

	while (1)
	{
		if (bufferRX == 10) // Cuando se recibe un 10
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	8a 30       	cpi	r24, 0x0A	; 10
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x1e>
		{
			uint8_t binary[8] = {0}; // Array para almacenar el número binario
 146:	be 01       	movw	r22, r28
 148:	6f 5f       	subi	r22, 0xFF	; 255
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	fb 01       	movw	r30, r22
 150:	11 92       	st	Z+, r1
 152:	8a 95       	dec	r24
 154:	e9 f7       	brne	.-6      	; 0x150 <main+0x30>
			decimalToBinary(bufferRX, binary); // Convertir el valor decimal a binario
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	0e 94 7a 00 	call	0xf4	; 0xf4 <decimalToBinary>
			
			// Asignar bits del PB0 al PB3
			PORTB = (binary[0] << PB0) | (binary[1] << PB1) | (binary[2] << PB2) | (binary[3] << PB3);
 15e:	69 81       	ldd	r22, Y+1	; 0x01
 160:	9a 81       	ldd	r25, Y+2	; 0x02
 162:	49 2f       	mov	r20, r25
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	9b 81       	ldd	r25, Y+3	; 0x03
 16c:	29 2f       	mov	r18, r25
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	9c 81       	ldd	r25, Y+4	; 0x04
 17a:	89 2f       	mov	r24, r25
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	46 2b       	or	r20, r22
 18c:	24 2b       	or	r18, r20
 18e:	82 2b       	or	r24, r18
 190:	85 b9       	out	0x05, r24	; 5
			// Asignar bits del PD4 al PD7
			PORTD = (binary[4] << PD4) | (binary[5] << PD5) | (binary[6] << PD6) | (binary[7] << PD7);
 192:	4d 81       	ldd	r20, Y+5	; 0x05
 194:	f0 e1       	ldi	r31, 0x10	; 16
 196:	4f 9f       	mul	r20, r31
 198:	b0 01       	movw	r22, r0
 19a:	11 24       	eor	r1, r1
 19c:	9e 81       	ldd	r25, Y+6	; 0x06
 19e:	80 e2       	ldi	r24, 0x20	; 32
 1a0:	98 9f       	mul	r25, r24
 1a2:	a0 01       	movw	r20, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	9f 81       	ldd	r25, Y+7	; 0x07
 1a8:	e0 e4       	ldi	r30, 0x40	; 64
 1aa:	9e 9f       	mul	r25, r30
 1ac:	90 01       	movw	r18, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	98 85       	ldd	r25, Y+8	; 0x08
 1b2:	f0 e8       	ldi	r31, 0x80	; 128
 1b4:	9f 9f       	mul	r25, r31
 1b6:	c0 01       	movw	r24, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	46 2b       	or	r20, r22
 1bc:	24 2b       	or	r18, r20
 1be:	82 2b       	or	r24, r18
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	bd cf       	rjmp	.-134    	; 0x13e <main+0x1e>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
