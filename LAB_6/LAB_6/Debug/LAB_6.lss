
LAB_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000810  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035c  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000de  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  9e:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
	ADCSRA |= (1<<ADIE);
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	
	DIDR0 |= (1<<ADC0D);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  da:	08 95       	ret

000000dc <__vector_21>:
}

ISR(ADC_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	PORTB = ADCH;
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f0:	85 b9       	out	0x05, r24	; 5
	
	ADCSRA |= (1<<ADIF);
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24

}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <writeUART>:

//Interrupcion
void writeUART(char Caracter){
	while(!(UCSR0A &(1<<UDRE0)));// Enviar a compu
 112:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 116:	95 ff       	sbrs	r25, 5
 118:	fc cf       	rjmp	.-8      	; 0x112 <writeUART>
	UDR0 = Caracter;
 11a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11e:	08 95       	ret

00000120 <writeTextUART>:
}
// Texto Full
void writeTextUART(char* Texto){
 120:	bc 01       	movw	r22, r24
	int i;
	for(i=0; Texto[i]!='\0'; i++){
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	08 c0       	rjmp	.+16     	; 0x138 <writeTextUART+0x18>
		while (!(UCSR0A &(1<<UDRE0)));
 128:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12c:	95 ff       	sbrs	r25, 5
 12e:	fc cf       	rjmp	.-8      	; 0x128 <writeTextUART+0x8>
		UDR0 = Texto[i];
 130:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = Caracter;
}
// Texto Full
void writeTextUART(char* Texto){
	int i;
	for(i=0; Texto[i]!='\0'; i++){
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	fb 01       	movw	r30, r22
 13a:	e2 0f       	add	r30, r18
 13c:	f3 1f       	adc	r31, r19
 13e:	40 81       	ld	r20, Z
 140:	41 11       	cpse	r20, r1
 142:	f2 cf       	rjmp	.-28     	; 0x128 <writeTextUART+0x8>
		while (!(UCSR0A &(1<<UDRE0)));
		UDR0 = Texto[i];
	}
}
 144:	08 95       	ret

00000146 <main>:



int main(void)
{
	DDRB |= 0b00111111;
 146:	84 b1       	in	r24, 0x04	; 4
 148:	8f 63       	ori	r24, 0x3F	; 63
 14a:	84 b9       	out	0x04, r24	; 4
	cli();
 14c:	f8 94       	cli
    initUART9600();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei();
 152:	78 94       	sei
	writeUART('H');
 154:	88 e4       	ldi	r24, 0x48	; 72
 156:	0e 94 89 00 	call	0x112	; 0x112 <writeUART>
	writeUART('o');
 15a:	8f e6       	ldi	r24, 0x6F	; 111
 15c:	0e 94 89 00 	call	0x112	; 0x112 <writeUART>
	writeUART('l');
 160:	8c e6       	ldi	r24, 0x6C	; 108
 162:	0e 94 89 00 	call	0x112	; 0x112 <writeUART>
	writeUART('a');
 166:	81 e6       	ldi	r24, 0x61	; 97
 168:	0e 94 89 00 	call	0x112	; 0x112 <writeUART>
	writeUART(10);
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	0e 94 89 00 	call	0x112	; 0x112 <writeUART>
	writeUART(13);
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	0e 94 89 00 	call	0x112	; 0x112 <writeUART>
	
	writeTextUART("Hola Mundo");
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 90 00 	call	0x120	; 0x120 <writeTextUART>
	
	ADCSRA |= (1<<ADSC);//ADC
 180:	ea e7       	ldi	r30, 0x7A	; 122
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x44>

0000018c <__vector_18>:
		while (!(UCSR0A &(1<<UDRE0)));
		UDR0 = Texto[i];
	}
}

ISR(USART_RX_vect){ // Resepcion.
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
	
	bufferTX = UDR0;
 198:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 19c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <bufferTX>
	
	while(!(UCSR0A &(1<<UDRE0)));//Enviar de regreso
 1a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a4:	85 ff       	sbrs	r24, 5
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <__vector_18+0x14>
	UDR0 = bufferTX;
 1a8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <bufferTX>
 1ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
